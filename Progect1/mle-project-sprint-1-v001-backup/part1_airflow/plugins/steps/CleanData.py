import pandas as pd
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def EmptyRR(df: pd.DataFrame) -> pd.DataFrame:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å NaN –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º 'price', —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ 
    —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    cols_before1 = df.shape[1]

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ —Å NaN –∏–ª–∏ –Ω—É–ª–µ–≤—ã–º 'price'
    initial_len = len(df)
    df = df.dropna(subset=['price'])
    df = df[df['price'] != 0]
    logger.info("üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–π –∏–ª–∏ –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π: %d", initial_len - len(df))
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    cols_before = df.shape[1]
    df = df.dropna(axis=1, how='all')
    cols_after = df.shape[1]
    logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –ø—É—Å—Ç—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤: %d", cols_before - cols_after)
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    cols_before = df.shape[1]
    identical_cols = [col for col in df.columns if df[col].nunique() <= 1]
    df = df.drop(columns=identical_cols)
    cols_after = df.shape[1]
    logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏: %d", cols_before - cols_after)

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ —Ñ–æ—Ä–º–∞—Ç—É 0,00
    for column in ['kitchen_area', 'living_area', 'total_area', 'ceiling_height']:
        if column in df.columns:
            df[column] = df[column].round(2)
            logger.info(f"üîπ –°—Ç–æ–ª–±–µ—Ü '{column}' –æ–∫—Ä—É–≥–ª—ë–Ω –¥–æ –¥–≤—É—Ö –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.")
    
   
    return df


def Dublikates(df: pd.DataFrame) -> pd.DataFrame:        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ flat_id, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if 'flat_id' in df.columns:
        df = df.drop(columns=['flat_id'])
        logger.info("üîç –°—Ç–æ–ª–±–µ—Ü 'flat_id' –±—ã–ª —É–¥–∞–ª—ë–Ω –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.")
    
    initial_len = len(df)
    df = df.drop_duplicates()
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    logger.info("üîç –£–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: %d", initial_len - len(df))
    
    return df

def EmptyCells(df: pd.DataFrame) -> pd.DataFrame:
    """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ª–æ–≥–∏–∫–µ."""
    missing = df.isna().sum()
    logger.info("üìâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:\n%s", missing[missing > 0])
    df = df.fillna({
        'has_elevator': False,
        'kitchen_area': df['kitchen_area'].median(),
        'living_area': df['living_area'].median(),
        'ceiling_height': df['ceiling_height'].median(),
        'flats_count': df['flats_count'].median(),
        'floors_total': df['floors_total'].median(),
        'build_year': df['build_year'].mode().iloc[0] if not df['build_year'].mode().empty else None,
    })
    return df

def Vibros(df: pd.DataFrame) -> pd.DataFrame:
    e1 = 4
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º IQR."""
    for column in ['total_area', 'price', 'ceiling_height']:
        if column in df.columns:
            Q1 = df[column].quantile(0.25)
            Q3 = df[column].quantile(0.75)
            IQR = Q3 - Q1
            lower_bound = Q1 - e1 * IQR
            upper_bound = Q3 + e1 * IQR
            before_len = len(df)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            df = df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]
            removed_outliers_count = before_len - len(df)
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π logger.info —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            logger.info("üîç –£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ %s: %d", column, removed_outliers_count)
            logger.info("üîπ –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ %s: –Ω–∏–∂–Ω—è—è %f, –≤–µ—Ä—Ö–Ω—è—è %f", column, lower_bound, upper_bound)
    
    return df

def Vibros2(df: pd.DataFrame) -> pd.DataFrame:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º 3 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ."""
    for column in ['total_area', 'price', 'ceiling_height']:
        if column in df.columns:
            std_dev = df[column].std()
            mean = df[column].mean()
            upper_limit = mean + 5 * std_dev
            lower_limit = mean - 3 * std_dev
            before_len = len(df)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±—Ä–æ—Å–æ–≤
            df = df[(df[column] <= upper_limit) & (df[column] >= lower_limit)]
            removed_outliers_count = before_len - len(df)
            
            # –õ–æ–≥ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –≤—ã–±—Ä–æ—Å–æ–≤
            logger.info("üîç –£–¥–∞–ª–µ–Ω–æ –≤—ã–±—Ä–æ—Å–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ –ú–µ—Ç–æ–¥2 %s: %d", column, removed_outliers_count)
            logger.info("üîπ –ì—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ %s: –Ω–∏–∂–Ω—è—è %f, –≤–µ—Ä—Ö–Ω—è—è %f", column, lower_limit, upper_limit)

    return df